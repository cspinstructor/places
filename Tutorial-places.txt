Intro:
https://developers.google.com/places/web-service/intro

Look at the Place Search link on the left panel.
Note that the first search is Place Search which returns placeid and photo_reference which
can then be used in Place Details and Place Photos respectively.

Goto:  https://developers.google.com/places/web-service/get-api-key
and click on the blue button GET A KEY

Google Places API Key:
AIzaSyDhUDwXlhJF0pzMIg4NoBr5LEifvOXMxbE

Usage API:
https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=1500&type=restaurant&keyword=cruise&key=AIzaSyDhUDwXlhJF0pzMIg4NoBr5LEifvOXMxbE
https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&types=food&name=harbour&key=AIzaSyDhUDwXlhJF0pzMIg4NoBr5LEifvOXMxbE

Create folder places.
npm init
npm install axios --save
npm install express --save
npm install mongodb --save

Create a file: .gitignore and put this line:
  node_modules

Create new repository in Github called: places, followed by:
  git init
  git add .
  git commit -m "Initial Commit"
  git remote add origin https://github.com/paulchin/places.git
  git push -u origin master

Create file:  app.js and add the lines: const axios... const port
Create views/partials folders

Copy bootstrap jumbostron from w3c bootstrap into home.hbs in views folder.
Copy navbar from w3c bootstrap into partials/navbar.hbs
Inject navbar into home.hbs.

Create a form.hbs and update the navbar link to include a Search.

Create a result.hbs and insert the relevant server.post('/getplaces') handler in app.js

In app.js, first make the call to google-geocode to get the lat,lng, then use that to make
the call to google-places by chaining the promises together and display the json result:
  res.status(200).send(response.data.results);
